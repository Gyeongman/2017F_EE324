20150073 김경만
multi_server: accept 함수를 이용하여 client의 request를 받았을 때 fork 함수를 사용하여 child process에서는 request를 받는 server_socket을 닫고 client와만 data를 주고받게 하였으며 parent process는 client_socket을 닫고 다시 accept함수를 실행하여 request를 기다리게 하였습니다. child process가 하는 역할은 assignment1과 거의 동일하지만 이번에는 파일이 아닌 "I am a thread [#]" 라는 문자열을 받기 때문에 command가 0x0003인 packet을 반복문이 아닌 딱 한번만 받게 수정했습니다. 즉 한번 0x0003인 packet을 받으면 문자열을 저장하고 있다가 바로 0x0004를 받고 파일 출력을 하게 했습니다. 또한 signal 함수를 이용하여 모든 프로세스가 끝날때까지 while 문으로 기다리도록 했습니다.
select_server: read_set에서 변화가 있는지 확인해야하는 fd를 set하고 그 read_set을 ready_set으로 옮겨와서 select함수를 통해 실제로 어떤 fd가 변화가 있는지 확인합니다. 변화가 있는 fd에 대해서 client와 data를 주고받는데 switch case문을 이용하여 지금 이 fd가 연결된 client와 어디까지 data를 주고받았는지 state로 확인하였습니다. 또한 각 fd에 대해 pool에서 배열로 seqence number와 문자열인 data를 저장하여 각 fd에 변화가 있을때마다 이 정보를 참고하여 multi_server에서 child process가 하는 역할과 동일하게 구현했습니다.
client: main함수에서는 인자로 받은 수만큼 thread를 만들었으며 join을 이용하여 모든 thread가 끝날때까지 기다렸다가 종료했습니다. 각 thread는 반복문의 i를 인자로 받아서 자신이 몇번째 thread인지를 알도록 했습니다. 인자로 받은 이 i를 통해 server에 연결한 뒤 적절한 문자열과 파일명을 server에 보내도록 했습니다. 